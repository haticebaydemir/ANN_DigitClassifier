{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/haticebaydemir/ann-digitclassifier?scriptVersionId=205536006\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"87b7d75e","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:02.794825Z","iopub.status.busy":"2024-11-06T08:22:02.794259Z","iopub.status.idle":"2024-11-06T08:22:20.362045Z","shell.execute_reply":"2024-11-06T08:22:20.360906Z"},"papermill":{"duration":17.583481,"end_time":"2024-11-06T08:22:20.364866","exception":false,"start_time":"2024-11-06T08:22:02.781385","status":"completed"},"tags":[]},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","\n","import struct\n","import warnings\n","warnings.filterwarnings('ignore')\n","import tensorflow as tf"]},{"cell_type":"code","execution_count":2,"id":"6411a908","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:20.388119Z","iopub.status.busy":"2024-11-06T08:22:20.387409Z","iopub.status.idle":"2024-11-06T08:22:20.400001Z","shell.execute_reply":"2024-11-06T08:22:20.398834Z"},"papermill":{"duration":0.027002,"end_time":"2024-11-06T08:22:20.402711","exception":false,"start_time":"2024-11-06T08:22:20.375709","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["[]"]},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":["tf.config.list_physical_devices('GPU')"]},{"cell_type":"code","execution_count":3,"id":"401830e0","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:20.4258Z","iopub.status.busy":"2024-11-06T08:22:20.425348Z","iopub.status.idle":"2024-11-06T08:22:20.434502Z","shell.execute_reply":"2024-11-06T08:22:20.433068Z"},"papermill":{"duration":0.023449,"end_time":"2024-11-06T08:22:20.437093","exception":false,"start_time":"2024-11-06T08:22:20.413644","status":"completed"},"tags":[]},"outputs":[],"source":["import struct\n","import numpy as np\n","\n","# File paths for MNIST dataset\n","train_images_path = '/kaggle/input/mnist-dataset/train-images.idx3-ubyte'\n","train_labels_path = '/kaggle/input/mnist-dataset/train-labels.idx1-ubyte'\n","test_images_path = '/kaggle/input/mnist-dataset/t10k-images.idx3-ubyte'\n","test_labels_path = '/kaggle/input/mnist-dataset/t10k-labels.idx1-ubyte'\n","\n","# Function to load files in IDX format\n","def load_idx(filename):\n","    # Open the file in binary read mode\n","    with open(filename, 'rb') as f:\n","        # Read the first 4 bytes to get metadata (zero padding, data type, dimensions)\n","        zero, data_type, dims = struct.unpack('>HBB', f.read(4))\n","        \n","        # Determine the shape of the data (number of dimensions)\n","        shape = tuple(struct.unpack('>I', f.read(4))[0] for d in range(dims))\n","        \n","        # Load the remaining bytes as a numpy array and reshape it according to the dimensions\n","        return np.frombuffer(f.read(), dtype=np.uint8).reshape(shape)\n"]},{"cell_type":"code","execution_count":4,"id":"1ab63033","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:20.459685Z","iopub.status.busy":"2024-11-06T08:22:20.459194Z","iopub.status.idle":"2024-11-06T08:22:20.467406Z","shell.execute_reply":"2024-11-06T08:22:20.466189Z"},"papermill":{"duration":0.022651,"end_time":"2024-11-06T08:22:20.470139","exception":false,"start_time":"2024-11-06T08:22:20.447488","status":"completed"},"tags":[]},"outputs":[],"source":["train_images_path = '/kaggle/input/mnist-dataset/train-images.idx3-ubyte'\n","train_labels_path = '/kaggle/input/mnist-dataset/train-labels.idx1-ubyte'\n","test_images_path = '/kaggle/input/mnist-dataset/t10k-images.idx3-ubyte'\n","test_labels_path = '/kaggle/input/mnist-dataset/t10k-labels.idx1-ubyte'\n","\n","# To load files in IDX format\n","def load_idx(filename):\n","    with open(filename, 'rb') as f:\n","        zero, data_type, dims = struct.unpack('>HBB', f.read(4))\n","        shape = tuple(struct.unpack('>I', f.read(4))[0] for d in range(dims))\n","        return np.frombuffer(f.read(), dtype=np.uint8).reshape(shape)"]},{"cell_type":"code","execution_count":5,"id":"7a720578","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:20.493878Z","iopub.status.busy":"2024-11-06T08:22:20.493404Z","iopub.status.idle":"2024-11-06T08:22:21.268496Z","shell.execute_reply":"2024-11-06T08:22:21.267337Z"},"papermill":{"duration":0.789738,"end_time":"2024-11-06T08:22:21.271404","exception":false,"start_time":"2024-11-06T08:22:20.481666","status":"completed"},"tags":[]},"outputs":[],"source":["# Loading the data\n","X_train = load_idx(train_images_path)\n","y_train = load_idx(train_labels_path)\n","X_test = load_idx(test_images_path)\n","y_test = load_idx(test_labels_path)"]},{"cell_type":"code","execution_count":6,"id":"4468b563","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:21.294459Z","iopub.status.busy":"2024-11-06T08:22:21.293985Z","iopub.status.idle":"2024-11-06T08:22:21.300959Z","shell.execute_reply":"2024-11-06T08:22:21.299801Z"},"papermill":{"duration":0.021551,"end_time":"2024-11-06T08:22:21.303602","exception":false,"start_time":"2024-11-06T08:22:21.282051","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["X_train shape: (60000, 28, 28)\n","X_test shape: (10000, 28, 28)\n","y_train shape: (60000,)\n","y_test shape: (10000,)\n"]}],"source":["# Let's check the dimensions of the data\n","print('X_train shape:', X_train.shape)\n","print('X_test shape:', X_test.shape)\n","print('y_train shape:', y_train.shape)\n","print('y_test shape:', y_test.shape)"]},{"cell_type":"markdown","id":"d471f227","metadata":{"papermill":{"duration":0.010186,"end_time":"2024-11-06T08:22:21.324682","exception":false,"start_time":"2024-11-06T08:22:21.314496","status":"completed"},"tags":[]},"source":["*X_train shape*: (60000, 28, 28)\n","* 60000: There are a total of 60,000 handwritten digit images in the training set.\n","* 28, 28: Each image is 28x28 pixels in size.\n","\n","*X_test shape*: (10000, 28, 28)\n","* 10000: There are a total of 10,000 handwritten digit images in the test set.\n","* 28, 28: Each image is also 28x28 pixels in size.\n","\n","*y_train shape*: (60000,)\n","* 60000: The training labels consist of an array with 60,000 elements, one for each training image.\n","\n","*y_test shape*: (10000,)\n","* 10000: The test labels consist of an array with 10,000 elements, one for each test image."]},{"cell_type":"code","execution_count":7,"id":"f83c6247","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:21.34779Z","iopub.status.busy":"2024-11-06T08:22:21.347313Z","iopub.status.idle":"2024-11-06T08:22:21.799027Z","shell.execute_reply":"2024-11-06T08:22:21.797665Z"},"papermill":{"duration":0.466303,"end_time":"2024-11-06T08:22:21.80172","exception":false,"start_time":"2024-11-06T08:22:21.335417","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 1000x200 with 5 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["def plot_images(images, labels, num_images=5):\n","    # Create a figure for displaying images\n","    plt.figure(figsize=(10, 2))\n","    \n","    for i in range(num_images):\n","        plt.subplot(1, num_images, i + 1)  # Create a subplot for each image\n","        plt.imshow(images[i], cmap='gray')  # Display the image in grayscale\n","        plt.title(f'Label: {labels[i]}')  # Set the title as the corresponding label\n","        plt.axis('off')  # Turn off the axis for a cleaner visualization\n","    plt.show()  # Show the plot with the selected images and labels\n","# Example: Plot 5 images and their corresponding labels    \n","plot_images(X_train, y_train, num_images=5)"]},{"cell_type":"code","execution_count":8,"id":"4f738675","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:21.825903Z","iopub.status.busy":"2024-11-06T08:22:21.825434Z","iopub.status.idle":"2024-11-06T08:22:21.937901Z","shell.execute_reply":"2024-11-06T08:22:21.936252Z"},"papermill":{"duration":0.128205,"end_time":"2024-11-06T08:22:21.940952","exception":false,"start_time":"2024-11-06T08:22:21.812747","status":"completed"},"tags":[]},"outputs":[],"source":["# Flatten the images from 28x28 dimensions and normalize them\n","X_train = X_train.reshape((X_train.shape[0], 28 * 28)).astype('float32') / 255\n","X_test = X_test.reshape((X_test.shape[0], 28 * 28)).astype('float32') / 255"]},{"cell_type":"code","execution_count":9,"id":"92eaabab","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:21.964544Z","iopub.status.busy":"2024-11-06T08:22:21.964045Z","iopub.status.idle":"2024-11-06T08:22:21.970562Z","shell.execute_reply":"2024-11-06T08:22:21.969404Z"},"papermill":{"duration":0.021585,"end_time":"2024-11-06T08:22:21.973334","exception":false,"start_time":"2024-11-06T08:22:21.951749","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["X_train shape: (60000, 784)\n","X_test shape: (10000, 784)\n"]}],"source":["# Print the shapes of the flattened training and test datasets to ensure correct transformation from 28x28 images to 784-dimensional arrays.\n","print('X_train shape:', X_train.shape)\n","print('X_test shape:', X_test.shape)"]},{"cell_type":"code","execution_count":10,"id":"27f033b8","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:21.997204Z","iopub.status.busy":"2024-11-06T08:22:21.996762Z","iopub.status.idle":"2024-11-06T08:22:22.093907Z","shell.execute_reply":"2024-11-06T08:22:22.092663Z"},"papermill":{"duration":0.112462,"end_time":"2024-11-06T08:22:22.096761","exception":false,"start_time":"2024-11-06T08:22:21.984299","status":"completed"},"tags":[]},"outputs":[],"source":["# Split the training data into training and validation sets.\n","# 20% of the data will be used for validation, while 80% will remain for training.\n","# The random_state parameter ensures reproducibility of the split.\n","X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)"]},{"cell_type":"code","execution_count":11,"id":"0d9ff057","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:22.121948Z","iopub.status.busy":"2024-11-06T08:22:22.12149Z","iopub.status.idle":"2024-11-06T08:22:22.211894Z","shell.execute_reply":"2024-11-06T08:22:22.210741Z"},"papermill":{"duration":0.106319,"end_time":"2024-11-06T08:22:22.214774","exception":false,"start_time":"2024-11-06T08:22:22.108455","status":"completed"},"tags":[]},"outputs":[],"source":["# Apply one-hot encoding to the class labels for training, validation, and test datasets.\n","# This transforms the labels into a binary matrix representation, \n","# with 10 classes in total, enabling multi-class classification.\n","y_train = tf.keras.utils.to_categorical(y_train, 10)\n","y_val = tf.keras.utils.to_categorical(y_val, 10)\n","y_test = tf.keras.utils.to_categorical(y_test, 10)"]},{"cell_type":"markdown","id":"e83f4d5b","metadata":{"papermill":{"duration":0.010564,"end_time":"2024-11-06T08:22:22.236988","exception":false,"start_time":"2024-11-06T08:22:22.226424","status":"completed"},"tags":[]},"source":["One-hot encoding is applied to class labels to enable multi-class classification. This process prevents the model from assuming any ordinal relationship between classes and enhances compatibility with loss functions like categorical cross-entropy. As a result, the model's learning process is optimized, allowing for a clear distinction between classes."]},{"cell_type":"code","execution_count":12,"id":"d6cb4655","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:22.260979Z","iopub.status.busy":"2024-11-06T08:22:22.260519Z","iopub.status.idle":"2024-11-06T08:22:22.268868Z","shell.execute_reply":"2024-11-06T08:22:22.267776Z"},"papermill":{"duration":0.023338,"end_time":"2024-11-06T08:22:22.271455","exception":false,"start_time":"2024-11-06T08:22:22.248117","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["array([[0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n","       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n","       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],\n","       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],\n","       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.]])"]},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":["# Display the first five encoded class labels to verify the one-hot encoding process.\n","y_train[:5]"]},{"cell_type":"markdown","id":"6b724e7e","metadata":{"papermill":{"duration":0.011217,"end_time":"2024-11-06T08:22:22.293652","exception":false,"start_time":"2024-11-06T08:22:22.282435","status":"completed"},"tags":[]},"source":["**Model**"]},{"cell_type":"code","execution_count":13,"id":"91c15de0","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:22.319162Z","iopub.status.busy":"2024-11-06T08:22:22.318032Z","iopub.status.idle":"2024-11-06T08:22:22.327193Z","shell.execute_reply":"2024-11-06T08:22:22.325862Z"},"papermill":{"duration":0.02453,"end_time":"2024-11-06T08:22:22.329973","exception":false,"start_time":"2024-11-06T08:22:22.305443","status":"completed"},"tags":[]},"outputs":[],"source":["# Construct the model using a sequential architecture, which allows layers to be stacked linearly.\n","model = tf.keras.models.Sequential()"]},{"cell_type":"markdown","id":"97baa363","metadata":{"papermill":{"duration":0.01126,"end_time":"2024-11-06T08:22:22.352535","exception":false,"start_time":"2024-11-06T08:22:22.341275","status":"completed"},"tags":[]},"source":["**Input Layer**"]},{"cell_type":"code","execution_count":14,"id":"e3ae1e69","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:22.376852Z","iopub.status.busy":"2024-11-06T08:22:22.376349Z","iopub.status.idle":"2024-11-06T08:22:22.462904Z","shell.execute_reply":"2024-11-06T08:22:22.461691Z"},"papermill":{"duration":0.102539,"end_time":"2024-11-06T08:22:22.466134","exception":false,"start_time":"2024-11-06T08:22:22.363595","status":"completed"},"tags":[]},"outputs":[],"source":["# Define the input layer with the shape corresponding to flattened 28x28 images\n","model.add(tf.keras.layers.Input(shape=(28 * 28,)))\n","\n","# Add the first hidden layer with 512 units and ReLU activation function\n","model.add(tf.keras.layers.Dense(512, activation='relu'))\n","\n","# Add a dropout layer with a rate of 0.3 to reduce overfitting during training\n","model.add(tf.keras.layers.Dropout(0.3))"]},{"cell_type":"markdown","id":"64439b88","metadata":{"papermill":{"duration":0.010478,"end_time":"2024-11-06T08:22:22.487731","exception":false,"start_time":"2024-11-06T08:22:22.477253","status":"completed"},"tags":[]},"source":["**Hidden Layer**"]},{"cell_type":"code","execution_count":15,"id":"bc03eee3","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:22.511611Z","iopub.status.busy":"2024-11-06T08:22:22.511095Z","iopub.status.idle":"2024-11-06T08:22:22.565631Z","shell.execute_reply":"2024-11-06T08:22:22.563988Z"},"papermill":{"duration":0.069937,"end_time":"2024-11-06T08:22:22.56871","exception":false,"start_time":"2024-11-06T08:22:22.498773","status":"completed"},"tags":[]},"outputs":[],"source":["# Adding the first hidden layer with 256 units and ReLU activation function.\n","model.add(tf.keras.layers.Dense(256, activation='relu'))  # hidden layer 1\n","\n","# Adding a dropout layer with a rate of 0.3 to reduce overfitting.\n","model.add(tf.keras.layers.Dropout(0.3))\n","\n","# Adding the second hidden layer with 128 units and ReLU activation function.\n","model.add(tf.keras.layers.Dense(128, activation='relu'))  # hidden layer 2\n","\n","# Adding another dropout layer with a rate of 0.3 to enhance generalization.\n","model.add(tf.keras.layers.Dropout(0.3))"]},{"cell_type":"markdown","id":"dde603a5","metadata":{"papermill":{"duration":0.010738,"end_time":"2024-11-06T08:22:22.591043","exception":false,"start_time":"2024-11-06T08:22:22.580305","status":"completed"},"tags":[]},"source":["**Output Layer**"]},{"cell_type":"code","execution_count":16,"id":"04e19512","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:22.615Z","iopub.status.busy":"2024-11-06T08:22:22.614452Z","iopub.status.idle":"2024-11-06T08:22:22.636646Z","shell.execute_reply":"2024-11-06T08:22:22.635327Z"},"papermill":{"duration":0.037799,"end_time":"2024-11-06T08:22:22.639811","exception":false,"start_time":"2024-11-06T08:22:22.602012","status":"completed"},"tags":[]},"outputs":[],"source":["# Output layer: Using softmax activation for multi-class classification.\n","model.add(tf.keras.layers.Dense(10, activation='softmax'))"]},{"cell_type":"markdown","id":"3abd67a3","metadata":{"papermill":{"duration":0.010777,"end_time":"2024-11-06T08:22:22.661768","exception":false,"start_time":"2024-11-06T08:22:22.650991","status":"completed"},"tags":[]},"source":["**Model Compilation**"]},{"cell_type":"code","execution_count":17,"id":"a35b456f","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:22.686341Z","iopub.status.busy":"2024-11-06T08:22:22.685884Z","iopub.status.idle":"2024-11-06T08:22:22.702112Z","shell.execute_reply":"2024-11-06T08:22:22.700827Z"},"papermill":{"duration":0.031969,"end_time":"2024-11-06T08:22:22.705095","exception":false,"start_time":"2024-11-06T08:22:22.673126","status":"completed"},"tags":[]},"outputs":[],"source":["# Compile the model using the Adam optimizer and categorical cross-entropy loss for multi-class classification, tracking accuracy as a metric.\n","model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])"]},{"cell_type":"code","execution_count":18,"id":"f4d55e30","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:22.729283Z","iopub.status.busy":"2024-11-06T08:22:22.728801Z","iopub.status.idle":"2024-11-06T08:22:22.735375Z","shell.execute_reply":"2024-11-06T08:22:22.733799Z"},"papermill":{"duration":0.021962,"end_time":"2024-11-06T08:22:22.73812","exception":false,"start_time":"2024-11-06T08:22:22.716158","status":"completed"},"tags":[]},"outputs":[],"source":["# Early stopping callback to prevent overfitting during training.\n","early_stopping = tf.keras.callbacks.EarlyStopping(\n","    monitor='val_loss',  # Metric to monitor (validation loss)\n","    patience=3,          # Stop training after 3 epochs without improvement in val_loss\n","    restore_best_weights=True,  # Restore the weights of the best model\n","    verbose=1            # Print status updates during training\n",")"]},{"cell_type":"markdown","id":"0417d9bb","metadata":{"papermill":{"duration":0.010765,"end_time":"2024-11-06T08:22:22.760325","exception":false,"start_time":"2024-11-06T08:22:22.74956","status":"completed"},"tags":[]},"source":["*Early stopping* is a regularization technique used to prevent overfitting in machine learning models, particularly neural networks.\n","**Key Points:**\n","* Purpose: To enhance model generalization by stopping training before the model learns the noise in the training data.\n","* Mechanism: The training process monitors a specific metric (commonly validation loss). If this metric does not improve for a defined number of consecutive epochs (known as \"patience\"), training is halted.\n","* Key Parameters:\n","* * Monitor: The metric to be observed (e.g., val_loss).\n","  * Patience: The number of epochs without improvement after which training will stop.\n","  * Restore Best Weights: A setting to restore the weights of the best-performing model instead of the final model.\n","\n","Benefits:\n","* Prevents overfitting, thereby improving the model’s performance on unseen data.\n","* Saves computational resources by terminating training when further improvements are unlikely.\n","\n","In summary, early stopping is an effective technique for optimizing the training process, ensuring the model maintains its best performance while minimizing the risk of overfitting."]},{"cell_type":"markdown","id":"edd98fa0","metadata":{"papermill":{"duration":0.010744,"end_time":"2024-11-06T08:22:22.782267","exception":false,"start_time":"2024-11-06T08:22:22.771523","status":"completed"},"tags":[]},"source":["**Model Training**"]},{"cell_type":"code","execution_count":19,"id":"d9d5008b","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:22:22.806339Z","iopub.status.busy":"2024-11-06T08:22:22.805858Z","iopub.status.idle":"2024-11-06T08:23:07.59371Z","shell.execute_reply":"2024-11-06T08:23:07.592377Z"},"papermill":{"duration":44.803402,"end_time":"2024-11-06T08:23:07.59675","exception":false,"start_time":"2024-11-06T08:22:22.793348","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/10\n","\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 12ms/step - accuracy: 0.7714 - loss: 0.7103 - val_accuracy: 0.9586 - val_loss: 0.1417\n","Epoch 2/10\n","\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 11ms/step - accuracy: 0.9513 - loss: 0.1624 - val_accuracy: 0.9667 - val_loss: 0.1103\n","Epoch 3/10\n","\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 11ms/step - accuracy: 0.9632 - loss: 0.1235 - val_accuracy: 0.9715 - val_loss: 0.0944\n","Epoch 4/10\n","\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 11ms/step - accuracy: 0.9719 - loss: 0.0959 - val_accuracy: 0.9769 - val_loss: 0.0797\n","Epoch 5/10\n","\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 12ms/step - accuracy: 0.9755 - loss: 0.0760 - val_accuracy: 0.9768 - val_loss: 0.0768\n","Epoch 6/10\n","\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 12ms/step - accuracy: 0.9799 - loss: 0.0675 - val_accuracy: 0.9790 - val_loss: 0.0791\n","Epoch 7/10\n","\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 11ms/step - accuracy: 0.9810 - loss: 0.0636 - val_accuracy: 0.9778 - val_loss: 0.0737\n","Epoch 8/10\n","\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 11ms/step - accuracy: 0.9835 - loss: 0.0542 - val_accuracy: 0.9788 - val_loss: 0.0820\n","Epoch 9/10\n","\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 11ms/step - accuracy: 0.9844 - loss: 0.0535 - val_accuracy: 0.9809 - val_loss: 0.0721\n","Epoch 10/10\n","\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 11ms/step - accuracy: 0.9875 - loss: 0.0405 - val_accuracy: 0.9804 - val_loss: 0.0725\n"]}],"source":["# Train the model on the training dataset using specified parameters.\n","# The model will be trained for 10 epochs with a batch size of 128.\n","# Validation data is provided to monitor performance on the validation set after each epoch.\n","results = model.fit(X_train, y_train, epochs=10, batch_size=128, validation_data=(X_val, y_val))"]},{"cell_type":"code","execution_count":20,"id":"ca3b7737","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:23:07.76058Z","iopub.status.busy":"2024-11-06T08:23:07.759215Z","iopub.status.idle":"2024-11-06T08:23:08.556487Z","shell.execute_reply":"2024-11-06T08:23:08.555181Z"},"papermill":{"duration":0.881822,"end_time":"2024-11-06T08:23:08.559956","exception":false,"start_time":"2024-11-06T08:23:07.678134","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 1200x500 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Visualize the training results\n","plt.figure(figsize=(12, 5))\n","\n","# Loss graph\n","plt.subplot(1, 2, 1)\n","plt.plot(results.history['loss'], label='Train Loss')  # Plot training loss\n","plt.plot(results.history['val_loss'], label='Validation Loss')  # Plot validation loss\n","plt.title('Loss Graph')  # Set the title for the loss graph\n","plt.xlabel('Epochs')  # Label for the x-axis\n","plt.ylabel('Loss')  # Label for the y-axis\n","plt.legend()  # Show legend for the graph\n","\n","# Accuracy graph\n","plt.subplot(1, 2, 2)\n","plt.plot(results.history['accuracy'], label='Train Accuracy')  # Plot training accuracy\n","plt.plot(results.history['val_accuracy'], label='Validation Accuracy')  # Plot validation accuracy\n","plt.title('Accuracy Graph')  # Set the title for the accuracy graph\n","plt.xlabel('Epochs')  # Label for the x-axis\n","plt.ylabel('Accuracy')  # Label for the y-axis\n","plt.legend()  # Show legend for the graph\n","\n","plt.tight_layout()  # Adjust layout for better spacing\n","plt.show()  # Display the graphs"]},{"cell_type":"markdown","id":"0fa91994","metadata":{"papermill":{"duration":0.081573,"end_time":"2024-11-06T08:23:08.723054","exception":false,"start_time":"2024-11-06T08:23:08.641481","status":"completed"},"tags":[]},"source":["**Model Prediction**"]},{"cell_type":"code","execution_count":21,"id":"6d865d8e","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:23:08.890464Z","iopub.status.busy":"2024-11-06T08:23:08.88937Z","iopub.status.idle":"2024-11-06T08:23:10.214269Z","shell.execute_reply":"2024-11-06T08:23:10.212846Z"},"papermill":{"duration":1.412502,"end_time":"2024-11-06T08:23:10.217136","exception":false,"start_time":"2024-11-06T08:23:08.804634","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step\n"]}],"source":["# Make predictions using the test set\n","y_pred = model.predict(X_test)  # Generate predictions for the test data\n","\n","# Convert predicted probabilities to class labels\n","y_pred_classes = np.argmax(y_pred, axis=1)  # Get the index of the maximum probability for each prediction\n"]},{"cell_type":"markdown","id":"13aa98c5","metadata":{"papermill":{"duration":0.085731,"end_time":"2024-11-06T08:23:10.387221","exception":false,"start_time":"2024-11-06T08:23:10.30149","status":"completed"},"tags":[]},"source":["**Model Evaluation**"]},{"cell_type":"code","execution_count":22,"id":"0316d11a","metadata":{"execution":{"iopub.execute_input":"2024-11-06T08:23:10.554643Z","iopub.status.busy":"2024-11-06T08:23:10.554114Z","iopub.status.idle":"2024-11-06T08:23:11.471259Z","shell.execute_reply":"2024-11-06T08:23:11.469984Z"},"papermill":{"duration":1.004493,"end_time":"2024-11-06T08:23:11.474268","exception":false,"start_time":"2024-11-06T08:23:10.469775","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Test Loss: 0.0730438381433487\n","Test Accuracy: 0.9801999926567078\n"]}],"source":["# Evaluate the model on the test set to determine its performance\n","test_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=0)  # Calculate loss and accuracy on the test data\n","\n","# Print the test loss and accuracy results\n","print('Test Loss:', test_loss)  # Output the test loss\n","print('Test Accuracy:', test_accuracy)  # Output the test accuracy"]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"datasetId":102285,"sourceId":242592,"sourceType":"datasetVersion"}],"dockerImageVersionId":30786,"isGpuEnabled":false,"isInternetEnabled":false,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.14"},"papermill":{"default_parameters":{},"duration":74.579746,"end_time":"2024-11-06T08:23:14.267984","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-11-06T08:21:59.688238","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}