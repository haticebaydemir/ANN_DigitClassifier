{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":242592,"sourceType":"datasetVersion","datasetId":102285}],"dockerImageVersionId":30786,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/haticebaydemir/ann-digitclassifier?scriptVersionId=205533872\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\nimport struct\nimport warnings\nwarnings.filterwarnings('ignore')\nimport tensorflow as tf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:07.851613Z","iopub.execute_input":"2024-11-06T08:07:07.85225Z","iopub.status.idle":"2024-11-06T08:07:29.523282Z","shell.execute_reply.started":"2024-11-06T08:07:07.852199Z","shell.execute_reply":"2024-11-06T08:07:29.522035Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"tf.config.list_physical_devices('GPU')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:29.525385Z","iopub.execute_input":"2024-11-06T08:07:29.526098Z","iopub.status.idle":"2024-11-06T08:07:29.53889Z","shell.execute_reply.started":"2024-11-06T08:07:29.526051Z","shell.execute_reply":"2024-11-06T08:07:29.537669Z"}},"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"[]"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"import struct\nimport numpy as np\n\n# File paths for MNIST dataset\ntrain_images_path = '/kaggle/input/mnist-dataset/train-images.idx3-ubyte'\ntrain_labels_path = '/kaggle/input/mnist-dataset/train-labels.idx1-ubyte'\ntest_images_path = '/kaggle/input/mnist-dataset/t10k-images.idx3-ubyte'\ntest_labels_path = '/kaggle/input/mnist-dataset/t10k-labels.idx1-ubyte'\n\n# Function to load files in IDX format\ndef load_idx(filename):\n    # Open the file in binary read mode\n    with open(filename, 'rb') as f:\n        # Read the first 4 bytes to get metadata (zero padding, data type, dimensions)\n        zero, data_type, dims = struct.unpack('>HBB', f.read(4))\n        \n        # Determine the shape of the data (number of dimensions)\n        shape = tuple(struct.unpack('>I', f.read(4))[0] for d in range(dims))\n        \n        # Load the remaining bytes as a numpy array and reshape it according to the dimensions\n        return np.frombuffer(f.read(), dtype=np.uint8).reshape(shape)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:29.540381Z","iopub.execute_input":"2024-11-06T08:07:29.540932Z","iopub.status.idle":"2024-11-06T08:07:29.578157Z","shell.execute_reply.started":"2024-11-06T08:07:29.540883Z","shell.execute_reply":"2024-11-06T08:07:29.576744Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"train_images_path = '/kaggle/input/mnist-dataset/train-images.idx3-ubyte'\ntrain_labels_path = '/kaggle/input/mnist-dataset/train-labels.idx1-ubyte'\ntest_images_path = '/kaggle/input/mnist-dataset/t10k-images.idx3-ubyte'\ntest_labels_path = '/kaggle/input/mnist-dataset/t10k-labels.idx1-ubyte'\n\n# To load files in IDX format\ndef load_idx(filename):\n    with open(filename, 'rb') as f:\n        zero, data_type, dims = struct.unpack('>HBB', f.read(4))\n        shape = tuple(struct.unpack('>I', f.read(4))[0] for d in range(dims))\n        return np.frombuffer(f.read(), dtype=np.uint8).reshape(shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:29.58097Z","iopub.execute_input":"2024-11-06T08:07:29.581454Z","iopub.status.idle":"2024-11-06T08:07:29.594255Z","shell.execute_reply.started":"2024-11-06T08:07:29.581408Z","shell.execute_reply":"2024-11-06T08:07:29.593016Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"# Loading the data\nX_train = load_idx(train_images_path)\ny_train = load_idx(train_labels_path)\nX_test = load_idx(test_images_path)\ny_test = load_idx(test_labels_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:29.596064Z","iopub.execute_input":"2024-11-06T08:07:29.59653Z","iopub.status.idle":"2024-11-06T08:07:30.046793Z","shell.execute_reply.started":"2024-11-06T08:07:29.596486Z","shell.execute_reply":"2024-11-06T08:07:30.045404Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"# Let's check the dimensions of the data\nprint('X_train shape:', X_train.shape)\nprint('X_test shape:', X_test.shape)\nprint('y_train shape:', y_train.shape)\nprint('y_test shape:', y_test.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:30.048496Z","iopub.execute_input":"2024-11-06T08:07:30.04902Z","iopub.status.idle":"2024-11-06T08:07:30.057181Z","shell.execute_reply.started":"2024-11-06T08:07:30.048949Z","shell.execute_reply":"2024-11-06T08:07:30.055767Z"}},"outputs":[{"name":"stdout","text":"X_train shape: (60000, 28, 28)\nX_test shape: (10000, 28, 28)\ny_train shape: (60000,)\ny_test shape: (10000,)\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"*X_train shape*: (60000, 28, 28)\n* 60000: There are a total of 60,000 handwritten digit images in the training set.\n* 28, 28: Each image is 28x28 pixels in size.\n\n*X_test shape*: (10000, 28, 28)\n* 10000: There are a total of 10,000 handwritten digit images in the test set.\n* 28, 28: Each image is also 28x28 pixels in size.\n\n*y_train shape*: (60000,)\n* 60000: The training labels consist of an array with 60,000 elements, one for each training image.\n\n*y_test shape*: (10000,)\n* 10000: The test labels consist of an array with 10,000 elements, one for each test image.","metadata":{}},{"cell_type":"code","source":"def plot_images(images, labels, num_images=5):\n    # Create a figure for displaying images\n    plt.figure(figsize=(10, 2))\n    \n    for i in range(num_images):\n        plt.subplot(1, num_images, i + 1)  # Create a subplot for each image\n        plt.imshow(images[i], cmap='gray')  # Display the image in grayscale\n        plt.title(f'Label: {labels[i]}')  # Set the title as the corresponding label\n        plt.axis('off')  # Turn off the axis for a cleaner visualization\n    plt.show()  # Show the plot with the selected images and labels\n# Example: Plot 5 images and their corresponding labels    \nplot_images(X_train, y_train, num_images=5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:30.058872Z","iopub.execute_input":"2024-11-06T08:07:30.059398Z","iopub.status.idle":"2024-11-06T08:07:30.491433Z","shell.execute_reply.started":"2024-11-06T08:07:30.059341Z","shell.execute_reply":"2024-11-06T08:07:30.490114Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x200 with 5 Axes>","image/png":""},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"# Flatten the images from 28x28 dimensions and normalize them\nX_train = X_train.reshape((X_train.shape[0], 28 * 28)).astype('float32') / 255\nX_test = X_test.reshape((X_test.shape[0], 28 * 28)).astype('float32') / 255","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:30.492881Z","iopub.execute_input":"2024-11-06T08:07:30.493283Z","iopub.status.idle":"2024-11-06T08:07:30.609502Z","shell.execute_reply.started":"2024-11-06T08:07:30.49324Z","shell.execute_reply":"2024-11-06T08:07:30.608216Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"# Print the shapes of the flattened training and test datasets to ensure correct transformation from 28x28 images to 784-dimensional arrays.\nprint('X_train shape:', X_train.shape)\nprint('X_test shape:', X_test.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:30.611596Z","iopub.execute_input":"2024-11-06T08:07:30.612171Z","iopub.status.idle":"2024-11-06T08:07:30.619164Z","shell.execute_reply.started":"2024-11-06T08:07:30.612099Z","shell.execute_reply":"2024-11-06T08:07:30.617938Z"}},"outputs":[{"name":"stdout","text":"X_train shape: (60000, 784)\nX_test shape: (10000, 784)\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"# Split the training data into training and validation sets.\n# 20% of the data will be used for validation, while 80% will remain for training.\n# The random_state parameter ensures reproducibility of the split.\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:30.624444Z","iopub.execute_input":"2024-11-06T08:07:30.625521Z","iopub.status.idle":"2024-11-06T08:07:30.726596Z","shell.execute_reply.started":"2024-11-06T08:07:30.625473Z","shell.execute_reply":"2024-11-06T08:07:30.725517Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# Apply one-hot encoding to the class labels for training, validation, and test datasets.\n# This transforms the labels into a binary matrix representation, \n# with 10 classes in total, enabling multi-class classification.\ny_train = tf.keras.utils.to_categorical(y_train, 10)\ny_val = tf.keras.utils.to_categorical(y_val, 10)\ny_test = tf.keras.utils.to_categorical(y_test, 10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:30.728152Z","iopub.execute_input":"2024-11-06T08:07:30.728638Z","iopub.status.idle":"2024-11-06T08:07:30.826343Z","shell.execute_reply.started":"2024-11-06T08:07:30.728583Z","shell.execute_reply":"2024-11-06T08:07:30.824975Z"}},"outputs":[],"execution_count":11},{"cell_type":"markdown","source":"One-hot encoding is applied to class labels to enable multi-class classification. This process prevents the model from assuming any ordinal relationship between classes and enhances compatibility with loss functions like categorical cross-entropy. As a result, the model's learning process is optimized, allowing for a clear distinction between classes.","metadata":{}},{"cell_type":"code","source":"# Display the first five encoded class labels to verify the one-hot encoding process.\ny_train[:5]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:30.827929Z","iopub.execute_input":"2024-11-06T08:07:30.828463Z","iopub.status.idle":"2024-11-06T08:07:30.838001Z","shell.execute_reply.started":"2024-11-06T08:07:30.828409Z","shell.execute_reply":"2024-11-06T08:07:30.83671Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"array([[0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],\n       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.]])"},"metadata":{}}],"execution_count":12},{"cell_type":"markdown","source":"**Model**","metadata":{}},{"cell_type":"code","source":"# Construct the model using a sequential architecture, which allows layers to be stacked linearly.\nmodel = tf.keras.models.Sequential()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:30.839977Z","iopub.execute_input":"2024-11-06T08:07:30.840472Z","iopub.status.idle":"2024-11-06T08:07:30.858115Z","shell.execute_reply.started":"2024-11-06T08:07:30.840426Z","shell.execute_reply":"2024-11-06T08:07:30.856861Z"}},"outputs":[],"execution_count":13},{"cell_type":"markdown","source":"**Input Layer**","metadata":{}},{"cell_type":"code","source":"# Define the input layer with the shape corresponding to flattened 28x28 images\nmodel.add(tf.keras.layers.Input(shape=(28 * 28,)))\n\n# Add the first hidden layer with 512 units and ReLU activation function\nmodel.add(tf.keras.layers.Dense(512, activation='relu'))\n\n# Add a dropout layer with a rate of 0.3 to reduce overfitting during training\nmodel.add(tf.keras.layers.Dropout(0.3))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:30.85991Z","iopub.execute_input":"2024-11-06T08:07:30.860482Z","iopub.status.idle":"2024-11-06T08:07:30.958677Z","shell.execute_reply.started":"2024-11-06T08:07:30.860422Z","shell.execute_reply":"2024-11-06T08:07:30.957233Z"}},"outputs":[],"execution_count":14},{"cell_type":"markdown","source":"**Hidden Layer**","metadata":{}},{"cell_type":"code","source":"# Adding the first hidden layer with 256 units and ReLU activation function.\nmodel.add(tf.keras.layers.Dense(256, activation='relu'))  # hidden layer 1\n\n# Adding a dropout layer with a rate of 0.3 to reduce overfitting.\nmodel.add(tf.keras.layers.Dropout(0.3))\n\n# Adding the second hidden layer with 128 units and ReLU activation function.\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))  # hidden layer 2\n\n# Adding another dropout layer with a rate of 0.3 to enhance generalization.\nmodel.add(tf.keras.layers.Dropout(0.3))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:30.960206Z","iopub.execute_input":"2024-11-06T08:07:30.960654Z","iopub.status.idle":"2024-11-06T08:07:31.019367Z","shell.execute_reply.started":"2024-11-06T08:07:30.960608Z","shell.execute_reply":"2024-11-06T08:07:31.018013Z"}},"outputs":[],"execution_count":15},{"cell_type":"markdown","source":"**Output Layer**","metadata":{}},{"cell_type":"code","source":"# Output layer: Using softmax activation for multi-class classification.\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:31.020988Z","iopub.execute_input":"2024-11-06T08:07:31.021377Z","iopub.status.idle":"2024-11-06T08:07:31.04637Z","shell.execute_reply.started":"2024-11-06T08:07:31.021335Z","shell.execute_reply":"2024-11-06T08:07:31.044887Z"}},"outputs":[],"execution_count":16},{"cell_type":"markdown","source":"**Model Compilation**","metadata":{}},{"cell_type":"code","source":"# Compile the model using the Adam optimizer and categorical cross-entropy loss for multi-class classification, tracking accuracy as a metric.\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:31.04876Z","iopub.execute_input":"2024-11-06T08:07:31.049286Z","iopub.status.idle":"2024-11-06T08:07:31.067308Z","shell.execute_reply.started":"2024-11-06T08:07:31.049225Z","shell.execute_reply":"2024-11-06T08:07:31.065921Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"# Early stopping callback to prevent overfitting during training.\nearly_stopping = tf.keras.callbacks.EarlyStopping(\n    monitor='val_loss',  # Metric to monitor (validation loss)\n    patience=3,          # Stop training after 3 epochs without improvement in val_loss\n    restore_best_weights=True,  # Restore the weights of the best model\n    verbose=1            # Print status updates during training\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:31.068833Z","iopub.execute_input":"2024-11-06T08:07:31.069334Z","iopub.status.idle":"2024-11-06T08:07:31.075691Z","shell.execute_reply.started":"2024-11-06T08:07:31.069258Z","shell.execute_reply":"2024-11-06T08:07:31.074352Z"}},"outputs":[],"execution_count":18},{"cell_type":"markdown","source":"*Early stopping* is a regularization technique used to prevent overfitting in machine learning models, particularly neural networks.\n**Key Points:**\n* Purpose: To enhance model generalization by stopping training before the model learns the noise in the training data.\n* Mechanism: The training process monitors a specific metric (commonly validation loss). If this metric does not improve for a defined number of consecutive epochs (known as \"patience\"), training is halted.\n* Key Parameters:\n* * Monitor: The metric to be observed (e.g., val_loss).\n  * Patience: The number of epochs without improvement after which training will stop.\n  * Restore Best Weights: A setting to restore the weights of the best-performing model instead of the final model.\n\nBenefits:\n* Prevents overfitting, thereby improving the model’s performance on unseen data.\n* Saves computational resources by terminating training when further improvements are unlikely.\n\nIn summary, early stopping is an effective technique for optimizing the training process, ensuring the model maintains its best performance while minimizing the risk of overfitting.","metadata":{}},{"cell_type":"markdown","source":"**Model Training**","metadata":{}},{"cell_type":"code","source":"# Train the model on the training dataset using specified parameters.\n# The model will be trained for 10 epochs with a batch size of 128.\n# Validation data is provided to monitor performance on the validation set after each epoch.\nresults = model.fit(X_train, y_train, epochs=10, batch_size=128, validation_data=(X_val, y_val))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:07:31.077543Z","iopub.execute_input":"2024-11-06T08:07:31.078463Z","iopub.status.idle":"2024-11-06T08:08:17.196304Z","shell.execute_reply.started":"2024-11-06T08:07:31.078405Z","shell.execute_reply":"2024-11-06T08:08:17.195062Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/10\n\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 12ms/step - accuracy: 0.7706 - loss: 0.7138 - val_accuracy: 0.9578 - val_loss: 0.1392\nEpoch 2/10\n\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 11ms/step - accuracy: 0.9514 - loss: 0.1700 - val_accuracy: 0.9697 - val_loss: 0.1055\nEpoch 3/10\n\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 11ms/step - accuracy: 0.9648 - loss: 0.1208 - val_accuracy: 0.9720 - val_loss: 0.0998\nEpoch 4/10\n\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 11ms/step - accuracy: 0.9725 - loss: 0.0918 - val_accuracy: 0.9759 - val_loss: 0.0820\nEpoch 5/10\n\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 12ms/step - accuracy: 0.9752 - loss: 0.0815 - val_accuracy: 0.9774 - val_loss: 0.0788\nEpoch 6/10\n\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 12ms/step - accuracy: 0.9779 - loss: 0.0735 - val_accuracy: 0.9785 - val_loss: 0.0767\nEpoch 7/10\n\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 11ms/step - accuracy: 0.9811 - loss: 0.0622 - val_accuracy: 0.9785 - val_loss: 0.0764\nEpoch 8/10\n\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 12ms/step - accuracy: 0.9829 - loss: 0.0560 - val_accuracy: 0.9778 - val_loss: 0.0825\nEpoch 9/10\n\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 11ms/step - accuracy: 0.9842 - loss: 0.0495 - val_accuracy: 0.9797 - val_loss: 0.0759\nEpoch 10/10\n\u001b[1m375/375\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 12ms/step - accuracy: 0.9860 - loss: 0.0462 - val_accuracy: 0.9811 - val_loss: 0.0719\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"# Visualize the training results\nplt.figure(figsize=(12, 5))\n\n# Loss graph\nplt.subplot(1, 2, 1)\nplt.plot(results.history['loss'], label='Train Loss')  # Plot training loss\nplt.plot(results.history['val_loss'], label='Validation Loss')  # Plot validation loss\nplt.title('Loss Graph')  # Set the title for the loss graph\nplt.xlabel('Epochs')  # Label for the x-axis\nplt.ylabel('Loss')  # Label for the y-axis\nplt.legend()  # Show legend for the graph\n\n# Accuracy graph\nplt.subplot(1, 2, 2)\nplt.plot(results.history['accuracy'], label='Train Accuracy')  # Plot training accuracy\nplt.plot(results.history['val_accuracy'], label='Validation Accuracy')  # Plot validation accuracy\nplt.title('Accuracy Graph')  # Set the title for the accuracy graph\nplt.xlabel('Epochs')  # Label for the x-axis\nplt.ylabel('Accuracy')  # Label for the y-axis\nplt.legend()  # Show legend for the graph\n\nplt.tight_layout()  # Adjust layout for better spacing\nplt.show()  # Display the graphs","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:08:17.198237Z","iopub.execute_input":"2024-11-06T08:08:17.198669Z","iopub.status.idle":"2024-11-06T08:08:17.988706Z","shell.execute_reply.started":"2024-11-06T08:08:17.19861Z","shell.execute_reply":"2024-11-06T08:08:17.987002Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":20},{"cell_type":"markdown","source":"**Model Prediction**","metadata":{}},{"cell_type":"code","source":"# Make predictions using the test set\ny_pred = model.predict(X_test)  # Generate predictions for the test data\n\n# Convert predicted probabilities to class labels\ny_pred_classes = np.argmax(y_pred, axis=1)  # Get the index of the maximum probability for each prediction\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:08:17.990416Z","iopub.execute_input":"2024-11-06T08:08:17.990804Z","iopub.status.idle":"2024-11-06T08:08:19.250238Z","shell.execute_reply.started":"2024-11-06T08:08:17.990765Z","shell.execute_reply":"2024-11-06T08:08:19.249031Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step\n","output_type":"stream"}],"execution_count":21},{"cell_type":"markdown","source":"**Model Evaluation**","metadata":{}},{"cell_type":"code","source":"# Evaluate the model on the test set to determine its performance\ntest_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=0)  # Calculate loss and accuracy on the test data\n\n# Print the test loss and accuracy results\nprint('Test Loss:', test_loss)  # Output the test loss\nprint('Test Accuracy:', test_accuracy)  # Output the test accuracy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-06T08:08:19.251807Z","iopub.execute_input":"2024-11-06T08:08:19.252215Z","iopub.status.idle":"2024-11-06T08:08:20.169142Z","shell.execute_reply.started":"2024-11-06T08:08:19.252172Z","shell.execute_reply":"2024-11-06T08:08:20.167871Z"}},"outputs":[{"name":"stdout","text":"Test Loss: 0.06919893622398376\nTest Accuracy: 0.9810000061988831\n","output_type":"stream"}],"execution_count":22}]}